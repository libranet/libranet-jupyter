# This is a comment.
# syntax-documentation:
#  - https://packaging.python.org/en/latest/guides/writing-pyproject-toml/
#
# NOTE: you have to use single-quoted strings in TOML for regular expressions.
# It's the equivalent of r-strings in Python. Multiline strings are treated as
# verbose regular expressions by Black. Use [ ] to denote a significant space
# character.
#
#   > just install
#   > uv sync
#   > uv sync --all-groups
#   > uv sync --with <groupname>


[build-system]
requires = ["uv_build>=0.8.19,<0.9.0"]
build-backend = "uv_build"


[tool.bandit]
# bandit does not use this config by default.
# You need to invoke "bandit --configfile pyproject.toml"
# see https://github.com/PyCQA/bandit/issues/318"
# baseline = "etc/bandit-baseline.json"
exclude_dirs = [".venv", "var"]
recursive = true
skips = [
    # see https://bandit.readthedocs.io/en/1.7.3/plugins/index.html#plugin-id-groupings
    # "B101", # assert_used
]
targets = ["docs", "src", "tests"]

[tool.bandit.assert_used]
skips = ["*/test_*.py"]


[tool.coverage.html]
# directory = "var/coverage/html"
directory = "var/html/coverage"

[tool.coverage.xml]
# output = "var/coverage/coverage.xml"
output = "var/html/coverage/coverage.xml"


[tool.coverage.report]
# cfr. https://coverage.readthedocs.io/en/coverage-4.2/excluding.html
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]
include = ["src/*"]

[tool.coverage.run]
branch = true
data_file = "var/cache/coverage/coverage.db"


[tool.isort]
include_trailing_comma = true # corresponds to -tc flag
known_third_party = []
line_length = 120             # corresponds to -w  flag
multi_line_output = 3         # corresponds to -m  flag
skip_glob = '^((?!py$).)*$'   # isort all Python files


[tool.mypy]
# cfr https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
cache_dir = "var/cache/mypy"
check_untyped_defs = true
exclude = "^bin/"
ignore_missing_imports = true
mypy_path = ["src"]


# [tool.nox]
# envdir = "var/cache/nox"


[project]
name = "libranet_jupyter"
version = "0.1"
description = "Utility-package for jupter notebooks."
readme = "docs/readme.md"
authors = [{ name = "Wouter Vanden Hove", email = "wouter@libranet.eu" }]
maintainers = [{ name = "Wouter Vanden Hove", email = "wouter@libranet.eu" }]
requires-python = ">=3.10"
license = { file = "docs/license.md" }
keywords = ["jupyter", "jupyterlab"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    "Typing :: Typed",
]
dependencies = [
    "autoread_dotenv>=1.0.3",
    "ipykernel>=6.29",
    "jupyterlab>=4.3",
    "jupyterlab-night>=0.5",
    "libranet-logging>=1.5",
    "nbformat>=5.10.4",
    "plotly>=5.24.1",
]

[project.urls]
homepage = "https://github.com/libranet/libranet-jupyter"
repository = "https://github.com/libranet/libranet-jupyter"
docs = "https://libranet-jupyter.readthedocs.io"
"Issue Tracker" = "https://github.com/Libranet/libranet_jupyter/issues"

[dependency-groups]
# dev = [
#     "pylint>=3.1.0",
#     "ruff>=0.8.6",
# ]


deployment = [
    "supervisor>=4.2",
]
# dist = [
#     "pyroma>=2.0.0",
# ]
docs = [
    "autoapi>=2.0.1",
    "markupsafe>=2.1.2",
    "myst-parser>=1.0.0",
    "recommonmark>=0.7.1",
    "Sphinx>=4.4.0",
    "sphinx-autoapi>=1.8.4",
    "sphinx-rtd-theme>=1.0.0",
]
ipython = [
    # ipdb = ">=0.13.9"
    "ipython>=8.31.0",
    "rich>=13.9.4",
]
pre-commit = [
    "pre-commit>=4.0.1",
    "pre-commit-hooks>=5.0.0",
]
# profiling = [
#     "importtime-waterfall>=1.0.0",
#     "tuna>=0.5.11",
# ]
# testing = [
#     "coverage>=6.2",
#     "pytest>=8.1.1",
#     "pytest-clarity>=1.0",
#     "pytest-codecov>=0.5.1",
#     "pytest-cov>=5.0.0",
#     "pytest-dotenv>=0.5.2",
#     "pytest-nunit>=1.0.7",
# ]
# typing = [
#     "lxml>=4.9.2",
#     "mypy>=0.931",
# ]
# security = [
#     "bandit>=1.7.4",
#     # "safety>=2.3.5",
# ]


[tool.pylint.format]
max-line-length = 120
good-names = [
    "foo", # dummy variable
    "i",   # counter in loop
    "ok",  # status
]

[tool.pylint.messages_control]
disable = [
    "C0116", # missing-function-docstring
]


[tool.pytest.ini_options]
cache_dir = "var/cache/pytest"
log_cli = false  # enable to show log-output
log_cli_level = "NOTSET"
filterwarnings = []
markers = ["unit", "integration"]
testpaths = ["tests"]
# the junit-report is used to report coverage in gitlab
# the nunit-report is used to report coverage in azure pipelines.
addopts = "--color=yes --junit-xml='var/cache/coverage/pytest.xml'"


[tool.pyright]
# VSCode will log an error if this section is missing
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
include = ["src", "tests"]


[tool.ruff]
# https://beta.ruff.rs/docs/configuration/
# https://docs.astral.sh/ruff/configuration/#using-pyprojecttoml
cache-dir = "var/cache/ruff" # relative to project_root
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # D203 conflicts withs D211
    "D203", # 1 blank line required before class docstring
    # "D211", # No blank lines allowed before class docstring
    # D212 conflicts with D213
    "D212",    # Multi-line docstring summary should start at the first line
    # "D213",  # Multi-line docstring summary should start at the second line
    # conflicts with 'ruff format'
    "COM812",  # Trailing comma missing
    "ISC001",  # Implicitly concatenated string literals on one line
]

[tool.ruff.lint.isort]
# https://docs.astral.sh/ruff/settings/#lintisort
combine-as-imports = true
force-single-line = false
from-first = false
known-third-party = []
known-first-party = ["libranet_jupyter"]
known-local-folder = ["_helpers"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["INP001"]  # tests-dir should not be a python-package

[tool.uv]
managed = true
package = false
# default-groups = [
    # "dev",
    # "databricks",
    # "ipython",
    # "jupyter",
    # # "licensing",
    # "pre-commit",
    # "testing",
    # "typing",
# ]
